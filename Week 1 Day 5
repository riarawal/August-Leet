Add and Search Word - Data structure design
Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

Example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.

Hint:
You should be familiar with how a Trie works. If not, please work on this problem: Implement Trie (Prefix Tree) first.

-------

Use data structure and make fxns

// class WordDictionary {

//     /** Initialize your data structure here. */
//     public WordDictionary() {
//         String word;
//     }
    
//     /** Adds a word into the data structure. */
//     public void addWord(String word) {
        
//     }
    
//     /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
//     public boolean search(String word) {
        
//     }
// }

// /**
//  * Your WordDictionary object will be instantiated and called as such:
//  * WordDictionary obj = new WordDictionary();
//  * obj.addWord(word);
//  * boolean param_2 = obj.search(word);
//  */

----


