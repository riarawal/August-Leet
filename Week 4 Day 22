Random Point in Non-overlapping Rectangles

Solution
Given a list of non-overlapping axis-aligned rectangles rects, write a function pick which randomly and uniformily picks an integer point in the space covered by the rectangles.

Note:

An integer point is a point that has integer coordinates. 
A point on the perimeter of a rectangle is included in the space covered by the rectangles. 
ith rectangle = rects[i] = [x1,y1,x2,y2], where [x1, y1] are the integer coordinates of the bottom-left corner, and [x2, y2] are the integer coordinates of the top-right corner.
length and width of each rectangle does not exceed 2000.
1 <= rects.length <= 100
pick return a point as an array of integer coordinates [p_x, p_y]
pick is called at most 10000 times.
Example 1:

Input: 
["Solution","pick","pick","pick"]
[[[[1,1,5,5]]],[],[],[]]
Output: 
[null,[4,1],[4,1],[3,3]]
Example 2:

Input: 
["Solution","pick","pick","pick","pick","pick"]
[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]
Output: 
[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]
Explanation of Input Syntax:

The input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, the array of rectangles rects. pick has no arguments. Arguments are always wrapped with a list, even if there aren't any.


------------

class Solution {
    int total = 0;
    int[][] rects;
    TreeMap<Integer, Integer> treemap = new TreeMap<>();
    Random random = new Random();
    public Solution(int[][] rects) {
        int sum = 0;
        this.rects = rects;
        int index = 0;
        for(int[] ele: rects){
            treemap.put(sum, index);
            sum += Math.abs(ele[2]-ele[0]+1)*Math.abs(ele[3]-ele[1]+1);
            index += 1;
        }
        this.total = sum;
    }
    
    public int[] pick() {
        int random_num = random.nextInt(this.total);
        int key = treemap.floorKey(random_num);
        int index = treemap.get(key);
        
        int[] rec = rects[index];
        
        int width = rec[2] - rec[0] + 1;
        int height = rec[3] - rec[1] + 1;
        int x = random.nextInt(width)+rec[0];
        int y = random.nextInt(height)+rec[1];
        
        return new int[]{x, y};
    }
}
