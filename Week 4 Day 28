Implement Rand10() Using Rand7()

Solution
Given a function rand7 which generates a uniform random integer in the range 1 to 7, write a function rand10 which generates a uniform random integer in the range 1 to 10.

Do NOT use system's Math.random().

 

Example 1:

Input: 1
Output: [7]
Example 2:

Input: 2
Output: [8,4]
Example 3:

Input: 3
Output: [8,1,10]
 

Note:

rand7 is predefined.
Each testcase has one argument: n, the number of times that rand10 is called.
 

Follow up:

What is the expected value for the number of calls to rand7() function?
Could you minimize the number of calls to rand7()?

--------

/**
 * The rand7() API is already defined in the parent class SolBase.
 * public int rand7();
 * @return a random integer in the range 1 to 7
 */
class Solution extends SolBase {
    // public int rand10() {
    //     int z=rand7()||rand;    
    //     return z ;   
    // }
    
    // public int rand10() {
    //     int row, col, idx;
    //     do {
    //         row = rand7();
    //         col = rand7();
    //         idx = col + (row - 1) * 7;
    //     } while (idx > 40);
    //     return 1 + (idx - 1) % 10;
    // }
    public int rand10() {
    int result = 40;
    while (result >= 40) {result = 7 * (rand7() - 1) + (rand7() - 1);}
    return result % 10 + 1;
    }
//     public int rand11() {
//     int result = 22;
//     while (result >= 22) {result = 3 * 3 * (rand3() - 1) + 3 * (rand3() - 1) + (rand3() - 1);}
//     return result % 11 + 1;
//     }
    
//     public int rand9() {
//     int result = 45;
//     while (result >= 45) {result = 7 * (rand7() - 1) + (rand7() - 1);}
//     return result % 9 + 1;
//     }
//     public int rand13() {
//     int result = 26;
//     while (result >= 26) {result = 6 * (rand6() - 1) + (rand6() - 1);}
//     return result % 13 + 1;
//     }
    
}


