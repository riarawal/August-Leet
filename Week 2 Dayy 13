Iterator for Combination

Solution
Design an Iterator class, which has:

A constructor that takes a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.
A function next() that returns the next combination of length combinationLength in lexicographical order.
A function hasNext() that returns True if and only if there exists a next combination.
 

Example:

CombinationIterator iterator = new CombinationIterator("abc", 2); // creates the iterator.

iterator.next(); // returns "ab"
iterator.hasNext(); // returns true
iterator.next(); // returns "ac"
iterator.hasNext(); // returns true
iterator.next(); // returns "bc"
iterator.hasNext(); // returns false
 

Constraints:

1 <= combinationLength <= characters.length <= 15
There will be at most 10^4 function calls per test.
It's guaranteed that all calls of the function next are valid.

Generate all combinations as a preprocessing.
   Hide Hint #2  
Use bit masking to generate all the combinations.
---------------


/*lass CombinationIterator {

    public CombinationIterator(String characters, int combinationLength) {
        
    }
    
    public String next() {
        
    }
    
    public boolean hasNext() {

    */


/**
 * Your CombinationIterator object will be instantiated and called as such:
 * CombinationIterator obj = new CombinationIterator(characters, combinationLength);
 * String param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */

class CombinationIterator {
 
    List<String> res = new ArrayList<>();
    StringBuilder sol = new StringBuilder();
    int len;
    
    int index = 0;
    int limit = (int) 1e4;
    
    public CombinationIterator(String characters, int combinationLength) {
        this.len = combinationLength;
        backtrack(0, characters);
    }
    
    void backtrack(int start, String characters) {
        if (res.size() > limit) return; // the problem constraints of 1e4 calls
        
        if (sol.length() == len) {
            res.add(sol.toString());
            return;
        }
        
        for (int i = start; i < characters.length(); i++) {
            sol.append(characters.charAt(i));
            backtrack(i+1, characters);
            sol.setLength(sol.length()-1);
        }
    }
    
    public String next() {
        if (!hasNext()) return "";
        
        return res.get(index++);
    }
    
    public boolean hasNext() {
        return index < res.size();
    }
}
